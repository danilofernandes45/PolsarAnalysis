plotHistogramGamma <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
mean <- mean(sample)
sd <- sd(sample)
alpha <- mean ^2 / sd ^2
beta <- sd^2 / mean
#Plot
x <- seq( from = 0, to = 0.2, by = 0.001)
desc <- paste("Gamma(", round(alpha, 3), ", ", round(beta, 3), ")", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dgamma(x, shape = alpha, scale = beta), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
logit <- function(x){
return( log(x) / log(1-x) )
}
plotHistogramLogitnorm <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
logit <- logit(sample)
mean <- mean( logit )
sd <- sd(logit)
#Plot
x <- seq( from = 0, to = 1, by = 0.001)
desc <- paste("LN(", round(mean, 3), ", ", round(sd, 3), "Â²)", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dlogitnorm(x, mu = mean, sigma = sd), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
# dpert <- function(x, min, mode, max){
#
#   alpha <- (4*mode + max - 5*min)/(max - min)
#   beta <- (5*max - min - 4*mode)/(max - min)
#   return( ( (x - min)^(alpha - 1) * (max - x)^(beta - 1) ) / ( beta(alpha, beta) * (max - min) ^ (alpha + beta - 1) ) )
#
# }
plotHistogramPert <- function(scatterer, dim, filter = FALSE, title = "", min, max){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
#shape <- 3.914062
shape <- 4
mode <- ((shape + 2)*mean(sample) - min - max)/shape
#Plot
x <- seq( from = min, to = max, by = 0.001)
desc <- paste("PERT(", round(min, 3), ", ", round(mode, 3), ", ", round(max, 3), ")", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dpert(x, min = min, mode = mode, max = max), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
plotQQPlotBeta <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
params = list(shape1 = alpha, shape2 = beta)
ggplot(data.frame(sample), aes(sample = sample)) +
stat_qq(distribution = qbeta, dparams = params) +
stat_qq_line(distribution = qbeta, dparams = params)
}
plotQQPlotPert <- function(scatterer, dim, filter = FALSE, title = "", min, max){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
mode <- (6*mean(sample) - min - max)/4
params <- list(min = min, mode = mode, max = max)
ggplot(data.frame(sample), aes(sample = sample)) +
stat_qq(distribution = qpert, dparams = params) +
stat_qq_line(distribution = qpert, dparams = params)
}
ksTestBeta <- function(scatterer, dim, filter = FALSE){
sample <- c(0)
if(filter){
sample <- getFilteredData(scatterer, dim)
} else {
sample <- getGeoDist(scatterer, dim)
}
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
return( ks.test(sample, "pbeta", shape1 = alpha, shape2 = beta))
}
alpha_gd <- function(dim, filter  = FALSE){
data = c()
if(filter){
data = getFilteredData("trihedral" , dim)
} else {
data = getGeoDist("trihedral", dim)
}
return(90*data)
}
helicity_gd <- function(dim){
data = 1 - sqrt( getGeoDist("left helix", dim) * getGeoDist("right helix", dim) )
return(45*data)
}
purity_gd <- function(dim, filter = TRUE){
hhhh <- read_data("HHHH", dim)
hvhv <- read_data("HVHV", dim)
vvvv <- read_data("VVVV", dim)
hhhv <- read_complex_data("HHHV", dim)
hhvv <- read_complex_data("HHVV", dim)
hvvv <- read_complex_data("HVVV", dim)
mod_kennaugh <- c(sqrt( hhhh^2 + hvhv^2 + vvvv^2 + 2*Mod(hhhv)^2 + 2*Mod(hhvv)^2 + 2*Mod(hvvv)^2 ))
inner_prod <- c( (hhhh + hvhv + vvvv) ) / 2
gd_data <- (2/pi)*acos( inner_prod / mod_kennaugh )
data <- ( 1.5 * gd_data )^2
return( data )
}
#Samples' location
dim_sb231 <- c(90, 65, 5, 30)
dim_cn43 <- c(25, 50, 30, 39)
dim_ot102 <- c(425, 65, 315, 30)
dim_wt104 <- c(515, 65, 360, 30)
#Samples' color
color_sb231 <- "#636F4B"
color_cn43 <- "#FFC840"
color_wt_104 <- "#F5DEB3"
color_ot_102 <- "#EFE6D8"
#Dataset path
actual_dir <- getwd()
wd <- c(
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/01_Subset_16_May_2016/T3", sep=""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/02_Subset_09_June_2016/T3", sep = ""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/03_Subset_03_July_2016/T3", sep = ""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/04_Subset_27_July_2016/T3", sep = ""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/05_Subset_20_Aug_2016/T3", sep = "")
)
#Purity from a sample over time
get_purity_sample <- function(dim){
sample <- array(0, dim = c(65, 30, 5))
for(i in 1:5){
setwd(wd[i])
sample[,,i] <- purity_gd(dim)
}
return(sample)
}
#Plot purity
plot_purity <- function(dim, k, color){
setwd(wd[k])
sample <- purity_gd(dim)
ggplot() +
geom_histogram(aes(x=log10(sample), y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Purity [log10]") + ylab("Density") + xlim(c(-0.75, 0.75))
}
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
#Compute parameters for normalized alpha from a sample at the time
compute_params_alpha <- function(dim, k){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
mean <- mean(sample)
var <- sd(sample)^2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
return(c(alpha, beta))
}
ksTestAlpha <- function(dim, k){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
return( c( length(sample),ks.test(sample, "pbeta", shape1 = alpha, shape2 = beta)$p.value))
}
compute_params_alpha(dim_ot102, k = 1)
setwd("~/PolsarAnalysis/Code")
#Samples' location
dim_sb231 <- c(90, 65, 5, 30)
dim_cn43 <- c(25, 50, 30, 39)
dim_ot102 <- c(425, 65, 315, 30)
dim_wt104 <- c(515, 65, 360, 30)
#Samples' color
color_sb231 <- "#636F4B"
color_cn43 <- "#FFC840"
color_wt_104 <- "#F5DEB3"
color_ot_102 <- "#EFE6D8"
#Dataset path
actual_dir <- getwd()
wd <- c(
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/01_Subset_16_May_2016/T3", sep=""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/02_Subset_09_June_2016/T3", sep = ""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/03_Subset_03_July_2016/T3", sep = ""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/04_Subset_27_July_2016/T3", sep = ""),
paste(actual_dir, "/../Data/Subset_SMAPVEX16_FQ15W_ACF/05_Subset_20_Aug_2016/T3", sep = "")
)
#Purity from a sample over time
get_purity_sample <- function(dim){
sample <- array(0, dim = c(65, 30, 5))
for(i in 1:5){
setwd(wd[i])
sample[,,i] <- purity_gd(dim)
}
return(sample)
}
#Plot purity
plot_purity <- function(dim, k, color){
setwd(wd[k])
sample <- purity_gd(dim)
ggplot() +
geom_histogram(aes(x=log10(sample), y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Purity [log10]") + ylab("Density") + xlim(c(-0.75, 0.75))
}
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
#Compute parameters for normalized alpha from a sample at the time
compute_params_alpha <- function(dim, k){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
mean <- mean(sample)
var <- sd(sample)^2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
return(c(alpha, beta))
}
ksTestAlpha <- function(dim, k){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
return( c( length(sample),ks.test(sample, "pbeta", shape1 = alpha, shape2 = beta)$p.value))
}
compute_params_alpha(dim_ot102, k = 1)
compute_params_alpha(dim_ot102, k = 2)
compute_params_alpha(dim_ot102, k = 3)
compute_params_alpha(dim_ot102, k = 4)
compute_params_alpha(dim_ot102, k = 5)
dim <- dim_sb231 <- c(90, 65, 5, 30)
dim
dim <- dim_ot102
dim
#Set a dim
#dim <- dim_sb231 <- c(90, 65, 5, 30)
#Analysis of alpha index
compute_statistic <- function(i, j){
setwd(wd[i])
sample <- getFilteredData("trihedral", dim)
n1 <- length(sample)
mean <- mean(sample)
var <- sd(sample)^2
a1 <- mean * ( mean * (1 - mean) / var - 1 )
b1 <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
setwd(wd[j])
sample <- getFilteredData("trihedral", dim)
n2 <- length(sample)
mean <- mean(sample)
var <- sd(sample)^2
a2 <- mean * ( mean * (1 - mean) / var - 1 )
b2 <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
a <- ( a1 + a2 ) / 2
b <- ( b1 + b2 ) / 2
s <- ( 8 * n1 * n2 / (n1 + n2) ) * ( 1 - beta(a, b) / sqrt( beta(a1, b1) * beta(a2, b2) ) )
return(s)
}
#H_0 : (a1, b1) = (a2, b2)
#H_a : (a1, b1) != (a2, b2)
pchisq( compute_statistic(1, 2), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(1, 3), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(1, 4), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(1, 5), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(2, 3), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(2, 4), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(2, 5), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(3, 4), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(3, 5), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(4, 5), df = 2, lower.tail = FALSE )
dim <- dim_wt104
#Set a dim
#dim <- dim_sb231 <- c(90, 65, 5, 30)
#Analysis of alpha index
compute_statistic <- function(i, j){
setwd(wd[i])
sample <- getFilteredData("trihedral", dim)
n1 <- length(sample)
mean <- mean(sample)
var <- sd(sample)^2
a1 <- mean * ( mean * (1 - mean) / var - 1 )
b1 <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
setwd(wd[j])
sample <- getFilteredData("trihedral", dim)
n2 <- length(sample)
mean <- mean(sample)
var <- sd(sample)^2
a2 <- mean * ( mean * (1 - mean) / var - 1 )
b2 <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
a <- ( a1 + a2 ) / 2
b <- ( b1 + b2 ) / 2
s <- ( 8 * n1 * n2 / (n1 + n2) ) * ( 1 - beta(a, b) / sqrt( beta(a1, b1) * beta(a2, b2) ) )
return(s)
}
#H_0 : (a1, b1) = (a2, b2)
#H_a : (a1, b1) != (a2, b2)
pchisq( compute_statistic(1, 2), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(1, 3), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(1, 4), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(1, 5), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(2, 3), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(2, 4), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(2, 5), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(3, 4), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(3, 5), df = 2, lower.tail = FALSE )
pchisq( compute_statistic(4, 5), df = 2, lower.tail = FALSE )
compute_params_alpha(dim_wt104, k = 1)
compute_params_alpha(dim_wt104, k = 2)
compute_params_alpha(dim_wt104, k = 3)
compute_params_alpha(dim_wt104, k = 4)
compute_params_alpha(dim_wt104, k = 5)
ksTestAlpha(dim_wt104, k = 1)
ksTestAlpha(dim_wt104, k = 2)
ksTestAlpha(dim_wt104, k = 3)
ksTestAlpha(dim_wt104, k = 4)
ksTestAlpha(dim_wt104, k = 5)
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)/0.9) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)/1.1) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)/1.2) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)/1.5) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=0.9*nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=0.7*nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=0.75*nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=0.72*nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=0.7*nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=0.7*nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1))# + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 1, color_wt_104)
plot_norm_alpha(dim_wt104, k = 2, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1))# + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 2, color_wt_104)
#Plot normalized alpha (distance to trihedral from most similar pixels)
plot_norm_alpha <- function(dim, k, color){
setwd(wd[k])
sample <- getFilteredData("trihedral", dim)
ggplot() +
geom_histogram(aes(x=sample, y = ..density..), fill=color, color = color,
alpha=0.8, position = 'identity', bins=nclass.FD(sample)) +
theme_ipsum(base_family = "Times New Roman", base_size = 70, axis_title_size = 70)+
xlab("Normalized Alpha") + ylab("Density") + xlim(c(0, 1)) + ylim(c(0, 4))
}
plot_norm_alpha(dim_wt104, k = 2, color_wt_104)
plot_norm_alpha(dim_wt104, k = 3, color_wt_104)
plot_norm_alpha(dim_wt104, k = 4, color_wt_104)
plot_norm_alpha(dim_wt104, k = 5, color_wt_104)
