dist_dihedral  <- (2/pi)*acos( hvhv / mod_kennaugh )
dist_rand_vol  <- (2/pi)*acos( ( 2*hhhh + hvhv + vvvv ) / ( sqrt(6)*mod_kennaugh ) )
dist_narrow_dihedral <- (2/pi)*acos((hhhh + 9*hvhv + 6*Re(hhhv))/
(10*mod_kennaugh) )
dist_cylinder <- (2/pi)*acos( ( 9*hhhh + hvhv + 6*Re(hhhv) ) /
(10*mod_kennaugh) )
dist_dipole <- (2/pi)*acos( ( hhhh + hvhv - 2*Re(hhhv) ) /
(2*mod_kennaugh) )
dist_left_helix <- (2/pi)*acos( ( hvhv + vvvv - 2*Im(hvvv) ) /
(2*mod_kennaugh) )
dist_right_helix <- (2/pi)*acos( ( hvhv + vvvv + 2*Im(hvvv) ) /
(2*mod_kennaugh) )
dist_pos_wave <- (2/pi)*acos( ( hhhh + hvhv - 2*Im(hhhv) ) /
(2*mod_kennaugh) )
dist_neg_wave <- (2/pi)*acos( ( hhhh + hvhv + 2*Im(hhhv) ) /
(2*mod_kennaugh) )
min <- pmin(dist_trihedral, dist_dihedral, dist_rand_vol, dist_narrow_dihedral,
dist_cylinder, dist_dipole, dist_left_helix, dist_right_helix,
dist_pos_wave, dist_neg_wave, na.rm = TRUE)
if(scatterer == "-1/4-wave"){
return ( dist_neg_wave[ which(dist_neg_wave == min) ] )
}
else if(scatterer == "+1/4-wave"){
return ( dist_pos_wave[ which(dist_pos_wave == min) ] )
}
else if(scatterer == "cylinder"){
return ( dist_cylinder[ which(dist_cylinder == min) ] )
}
else if(scatterer == "dihedral"){
return ( dist_dihedral[ which(dist_dihedral == min) ] )
}
else if(scatterer == "narrow dihedral"){
return ( dist_narrow_dihedral[ which(dist_narrow_dihedral == min) ] )
}
else if(scatterer == "dipole"){
return ( dist_dipole[ which(dist_dipole == min) ] )
}
else if(scatterer == "left helix"){
return ( dist_left_helix[ which(dist_left_helix == min) ] )
}
else if(scatterer == "right helix"){
return ( dist_right_helix[ which(dist_right_helix == min) ] )
}
else if(scatterer == "random volume"){
return ( dist_rand_vol[ which(dist_rand_vol == min) ] )
}
else if(scatterer == "trihedral"){
return ( dist_trihedral[ which(dist_trihedral == min) ] )
}
return( c(0) )
}
plotScattererMap <- function(dim, title = ""){
my_colours <- c("-1/4-wave" = "yellow", "+1/4-wave" = "orange", "Cylinder" = "red", "Dihedral" = "blue", "Dipole" = "navy",
"Left helix" = "peru", "NA" = "snow", "Narrow dihedral" = "greenyellow", "Random volume" = "green3",
"Right helix" = "purple", "Trihedral" = "magenta")
sample <- getMapMatrix(dim)
data_frame <- data.frame(melt(sample))
data_frame[1] <- data_frame[1] + dim[1]
data_frame[2] <- data_frame[2] + dim[3]
ggplot(data = data_frame, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() + scale_fill_manual(values = my_colours) + xlab("column") + ylab("row") +
ggtitle(title) +
theme(plot.title = element_text(hjust = 0.5))
}
plotHeatmap <- function(scatterer, dim, title = ""){
similarities <- getSimilarity(scatterer, dim)
ggplot( data = data.frame(melt(similarities)), aes(x = Var2, y = Var1, fill = value)) +
geom_tile() + scale_fill_gradient() + ylab("row") + xlab("column") +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
plotHistogramBeta <- function(scatterer, dim, filter = FALSE, title = "", range = c(0, 1)){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getGeoDist(scatterer, dim)
}
#Estimative of Beta parameters
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
#Plot
x <- seq( from = range[1], to = range[2], by = 0.001)
desc <- paste("Beta(", round(alpha, 3), ", ", round(beta, 3), ")", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..), bins = 45) + xlab("x") +
geom_line(aes(x = x, y = dbeta(x, alpha, beta), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
plotHistogramNorm <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
mean <- mean(sample)
sd <- sd(sample)
#Plot
x <- seq( from = 0, to = 1, by = 0.001)
desc <- paste("N(", round(mean, 3), ", ", round(sd, 3), "²)", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dnorm(x, mean, sd), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
plotHistogramGamma <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
mean <- mean(sample)
sd <- sd(sample)
alpha <- mean ^2 / sd ^2
beta <- sd^2 / mean
#Plot
x <- seq( from = 0, to = 0.2, by = 0.001)
desc <- paste("Gamma(", round(alpha, 3), ", ", round(beta, 3), ")", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dgamma(x, shape = alpha, scale = beta), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
logit <- function(x){
return( log(x) / log(1-x) )
}
plotHistogramLogitnorm <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
logit <- logit(sample)
mean <- mean( logit )
sd <- sd(logit)
#Plot
x <- seq( from = 0, to = 1, by = 0.001)
desc <- paste("LN(", round(mean, 3), ", ", round(sd, 3), "²)", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dlogitnorm(x, mu = mean, sigma = sd), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
# dpert <- function(x, min, mode, max){
#
#   alpha <- (4*mode + max - 5*min)/(max - min)
#   beta <- (5*max - min - 4*mode)/(max - min)
#   return( ( (x - min)^(alpha - 1) * (max - x)^(beta - 1) ) / ( beta(alpha, beta) * (max - min) ^ (alpha + beta - 1) ) )
#
# }
plotHistogramPert <- function(scatterer, dim, filter = FALSE, title = "", min, max){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
#Estimative of Beta parameters
#shape <- 3.914062
shape <- 4
mode <- ((shape + 2)*mean(sample) - min - max)/shape
#Plot
x <- seq( from = min, to = max, by = 0.001)
desc <- paste("PERT(", round(min, 3), ", ", round(mode, 3), ", ", round(max, 3), ")", sep="")
ggplot() +
geom_histogram(aes(x = c(sample), y = ..density..)) + xlab("x") +
geom_line(aes(x = x, y = dpert(x, min = min, mode = mode, max = max), colour = "red"), size = 1.3) +
scale_color_discrete(name = "Parameters", labels = c(desc)) +
ggtitle(title) + theme(plot.title = element_text(hjust = 0.5))
}
plotQQPlotBeta <- function(scatterer, dim, filter = FALSE, title = ""){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
params = list(shape1 = alpha, shape2 = beta)
ggplot(data.frame(sample), aes(sample = sample)) +
stat_qq(distribution = qbeta, dparams = params) +
stat_qq_line(distribution = qbeta, dparams = params)
}
plotQQPlotPert <- function(scatterer, dim, filter = FALSE, title = "", min, max){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
mode <- (6*mean(sample) - min - max)/4
params <- list(min = min, mode = mode, max = max)
ggplot(data.frame(sample), aes(sample = sample)) +
stat_qq(distribution = qpert, dparams = params) +
stat_qq_line(distribution = qpert, dparams = params)
}
ksTestBeta <- function(scatterer, dim, filter = FALSE){
sample <- c(0)
#Get sample
if(filter){
sample <- getFilteredData(scatterer, dim)
}
else {
sample <- getSimilarity(scatterer, dim)
}
mean <- mean(sample)
var <- sd(sample) ^ 2
alpha <- mean * ( mean * (1 - mean) / var - 1 )
beta <- ( 1 - mean ) * ( mean * ( 1 - mean ) / var - 1)
return( ks.test(sample, "pbeta", shape1 = alpha, shape2 = beta))
}
dim1 <- c(115, 65, 360, 30)
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/02_Subset_09_June_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/03_Subset_03_July_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/04_Subset_27_July_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/05_Subset_20_Aug_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/01_Subset_16_May_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
dim <- c(90, 65, 1, 30)
plotHistogramBeta("trihedral", dim1, filter = TRUE)
dim1 <- c(90, 65, 1, 30)
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/02_Subset_09_June_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/04_Subset_27_July_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/05_Subset_20_Aug_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
dim1 <- c(444, 65, 370, 35)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/01_Subset_16_May_2016/T3")
plotHistogramBeta("random volume", dim1, filter = TRUE)
setwd("~/PolsarAnalysis/Data/Subset_SMAPVEX16_FQ15W_ACF/04_Subset_27_July_2016/T3")
plotHistogramBeta("trihedral", dim1, filter = TRUE)
plotHistogramBeta("random volume", dim1, filter = TRUE)
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1481
#Beta(2.331, 10.086)
#p-value = 0.06498
#2TH SAMPLE -> SIZE = 867
#Beta(3.95, 13.849)
#p-value = 0.9471
#3TH SAMPLE -> SIZE = 429
#Beta(3.81, 11.209)
#p-value = 0.05863
#4TH SAMPLE -> SIZE = 397
#Beta(4.314, 12.227)
#p-value = 0.452
#5TH SAMPLE -> SIZE = 319
#Beta(4.798, 13.957)
#p-value = 0.4009
#KS-TEST => RANDOM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 71
#Beta(5.987, 10.993)
#p-value = 0.517
#2TH SAMPLE -> SIZE = 306
#Beta(7.662, 15.978)
#p-value = 0.7577
#3TH SAMPLE -> SIZE = 633
#Beta(5.75, 11.792)
#p-value = 0.4949
#4TH SAMPLE -> SIZE = 743
#Beta(5.473, 10.794)
#p-value = 0.1091
#5TH SAMPLE -> SIZE = 829
#Beta(5.191, 9.438)
#p-value = 0.1443
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1248
#Beta(3.557, 13.51)
#p-value = 0.8225
#2TH SAMPLE -> SIZE = 702
#Beta(4.578, 15.066)
#p-value = 0.9029
#3TH SAMPLE -> SIZE = 452
#Beta(3.594, 10.814)
#p-value = 0.4585
#4TH SAMPLE -> SIZE = 613
#Beta(4.291, 12.99)
#p-value = 0.6279
#5TH SAMPLE -> SIZE = 488
#Beta(4.192, 11.54)
#p-value = 0.5695
#KS-TEST => RANDOM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 161
#Beta(9.937, 20.475)
#p-value = 0.65
#2TH SAMPLE -> SIZE = 357
#Beta(8.006, 16.477)
#p-value = 0.1972
#3TH SAMPLE -> SIZE = 703
#Beta(6.062, 11.269)
#p-value = 0.1351
#4TH SAMPLE -> SIZE = 663
#Beta(5.527, 9.914)
#p-value = 0.008015
#5TH SAMPLE -> SIZE = 774
#Beta(5.849, 10.203)
#p-value = 0.5925
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1275
#Beta(3.039, 11.602)
#mean = 0.2075
#p-value = 0.2444
#2TH SAMPLE -> SIZE = 649
#Beta(4.752, 15.506)
#mean = 0.2345
#p-value = 0.9686
#3TH SAMPLE -> SIZE = 474
#Beta(4.553, 13.68)
#mean = 0.2497
#p-value = 0.7134
#4TH SAMPLE -> SIZE = 596
#Beta(4.217, 12.532)
#mean = 0.2517
#p-value = 0.4218
#5TH SAMPLE -> SIZE = 518
#Beta(4.02, 11.28)
#mean = 0.2627
#p-value = 0.1626
#KS-TEST => RANDOM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 132
#Beta(9.334, 18.516)
#mean = 0.3351
#p-value = 0.3404
#2TH SAMPLE -> SIZE = 387
#Beta(8.654, 17.722)
#mean = 0.3281
#p-value = 0.4521
#3TH SAMPLE -> SIZE = 649
#Beta(5.902, 10.969)
#mean = 0.3498
#p-value = 0.0695
#4TH SAMPLE -> SIZE = 630
#Beta(5.891, 10.621)
#mean = 0.3567
#p-value = 0.3572
#5TH SAMPLE -> SIZE = 811
#Beta(6.582, 11.241)
#mean = 0.3693
#p-value = 0.63
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1618
#Beta(2.824, 10.717)
#p-value = 0.1792
#2TH SAMPLE -> SIZE = 478
#Beta(4.287, 12.054)
#p-value = 0.4209
#3TH SAMPLE -> SIZE = 161
#Beta(6.411, 16.753)
#p-value = 0.5138
#4TH SAMPLE -> SIZE = 133
#Beta(5.295, 12.065)
#p-value = 0.0621
#5TH SAMPLE -> SIZE = 140
#Beta(5.651, 14.442)
#p-value = 0.6017
#KS-TEST => RANDOM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 144
#Beta(6.145, 10.938)
#p-value = 0.7154
#2TH SAMPLE -> SIZE = 861
#Beta(6.14, 10.973)
#p-value = 0.0938
#3TH SAMPLE -> SIZE = 842
#Beta(7.546, 13.919)
#p-value = 0.7788
#4TH SAMPLE -> SIZE = 1257
#Beta(5.147, 7.825)
#p-value = 0,3692
#5TH SAMPLE -> SIZE = 1099
#Beta(6.272, 10.019)
#p-value = 0.9186
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1488
#Beta(2.668, 10.152)
#p-value = 0.2311
#2TH SAMPLE -> SIZE = 482
#Beta(4.456, 13.458)
#p-value = 0.0687
#3TH SAMPLE -> SIZE = 196
#Beta(5.733, 14.528)
#p-value = 0.5568
#4TH SAMPLE -> SIZE = 154
#Beta(3.347, 7.189)
#p-value = 0.1075
#5TH SAMPLE -> SIZE = 160
#Beta(4.555, 11.353)
#p-value = 0.1920
#KS-TEST => RANDM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 222
#Beta(4.708, 9.005)
#p-value = 0.0895
#2TH SAMPLE -> SIZE = 852
#Beta(5.582, 9.885)
#p-value = 0.1386
#3TH SAMPLE -> SIZE = 842
#Beta(6.789, 12.832)
#p-value = 0.6134
#4TH SAMPLE -> SIZE = 1240
#Beta(4.819, 7.538)
#p-value = 0.1949
#5TH SAMPLE -> SIZE = 1117
#Beta(5.398, 8.922)
#p-value = 0.2524
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1552
#Beta(2.743, 10.169)
#p-value = 0.235
#2TH SAMPLE -> SIZE = 567
#Beta(4.385, 13.309)
#p-value = 0.2702
#3TH SAMPLE -> SIZE = 180
#Beta(5.529, 14.862)
#p-value = 0.6283
#4TH SAMPLE -> SIZE = 85
#Beta(5.442, 15.24)
#p-value = 0.6527
#5TH SAMPLE -> SIZE = 157
#Beta(4.813, 13.007)
#p-value = 0.4366
#=======================================================================
#KS-TEST => RANDOM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 205
#Beta(5.784, 10.578)
#p-value = 0.5134
#2TH SAMPLE -> SIZE = 746
#Beta(6.442, 12.226)
#p-value = 0.3752
#3TH SAMPLE -> SIZE = 917
#Beta(6.552, 12.212)
#p-value = 0.2791
#4TH SAMPLE -> SIZE = 829
#Beta(6.976, 12.719)
#p-value = 0.06878
#5TH SAMPLE -> SIZE = 904
#Beta(6.137, 11.37)
#p-value = 0.9926
#KS-TEST => TRIHEDRAL (FILTERED)
#1TH SAMPLE -> SIZE = 1964
#Beta(2.65, 10.603)
#p-value = 0.2384
#2TH SAMPLE -> SIZE = 1002
#Beta(3.546, 11.911)
#p-value = 0.2171
#3TH SAMPLE -> SIZE = 485
#Beta(5.802, 17.049)
#p-value = 0.9304
#4TH SAMPLE -> SIZE = 168
#Beta(5.567, 14.06)
#p-value = 0.6227
#5TH SAMPLE -> SIZE = 207
#Beta(6.951, 16.534)
#p-value = 0.2624
#========================================================================
#KS-TEST => RANDOM VOLUME (FILTERED)
#1TH SAMPLE -> SIZE = 155
#Beta(6.954, 12.92)
#p-value = 0.4064
#2TH SAMPLE -> SIZE = 625
#Beta(5.886, 11.54)
#p-value = 0.2018
#3TH SAMPLE -> SIZE = 1195
#Beta(5.56, 9.648)
#p-value = 0.3176
#4TH SAMPLE -> SIZE = 1413
#Beta(6.682, 10.779)
#p-value = 0.7323
#5TH SAMPLE -> SIZE = 1395
#Beta(6.028, 10.104)
#p-value = 0.7465
